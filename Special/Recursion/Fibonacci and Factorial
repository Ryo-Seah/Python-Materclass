def factorial(n):
    x = 1
    if n > 1:
        for f in range(2, n+1):
            x *= f
        return x
    else:
        return x


# for factorial, recursive is more concise
def recursive_factorial(n):
    if n <= 1:
        return n
    else:
        return n * (recursive_factorial(n-1))


# Recursive Fib - more concise but real inefficient due to exponential recursions
def fibonacci(n):
        if n<2:
            return n
        else:
            return fibonacci(n-2) + fibonacci(n-1)       
       
# Fibonacci loop, less concise but so much faster
def fib(n):
    if n==0:
        return 0
    if n==1:
        return 1
    else:
        r_minus1 = 1
        r_minus2 = 0
        for x in range(1, n):
            result = r_minus1 + r_minus2
            r_minus2 = r_minus1
            r_minus1 = result
        return result
        
for y in range(50):
    print(y, fib(y))
for y in range(50):
    print(y, fibonacci(y))
